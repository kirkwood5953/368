using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Collections.Concurrent;
using System.IO;

namespace WindowsFormsApp1
{
	public partial class Form1 : Form
	{
		ConcurrentQueue<Int32> dataQueue = new ConcurrentQueue<Int32>();
		ConcurrentQueue<Int32> averageQueue = new ConcurrentQueue<Int32>();
		ConcurrentQueue<Int32> stabilityQueue = new ConcurrentQueue<Int32>();
		string serialDataString = "";
		StreamWriter outputFile;
		int count;
		int nothing;
		double tare;
		double distance;

		int serialPortOpen = 0;
		int mostImport = 0;
		int leastImport = 0;
		int combined;
		double[] array1 = new double[] { 0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1, 1.00625, 1.0125, 1.01875, 1.025, 1.03125, 1.0375, 1.04375, 1.05, 1.05625, 1.0625, 1.06875, 1.075, 1.08125, 1.0875, 1.09375, 1.1, 1.10625, 1.1125, 1.11875, 1.125, 1.13125, 1.1375, 1.14375, 1.15, 1.15625, 1.1625, 1.16875, 1.175, 1.18125, 1.1875, 1.19375, 1.2, 1.20625, 1.2125, 1.21875, 1.225, 1.23125, 1.2375, 1.24375, 1.25, 1.25625, 1.2625, 1.26875, 1.275, 1.28125, 1.2875, 1.29375, 1.3, 1.30625, 1.3125, 1.31875, 1.325, 1.33125, 1.3375, 1.34375, 1.35, 1.35625, 1.3625, 1.36875, 1.375, 1.38125, 1.3875, 1.39375, 1.4, 1.40625, 1.4125, 1.41875, 1.425, 1.43125, 1.4375, 1.44375, 1.45, 1.45625, 1.4625, 1.46875, 1.475, 1.48125, 1.4875, 1.49375, 1.5, 1.50625, 1.5125, 1.51875, 1.525, 1.53125, 1.5375, 1.54375, 1.55, 1.55625, 1.5625, 1.56875, 1.575, 1.58125, 1.5875, 1.59375, 1.6, 1.60625, 1.6125, 1.61875, 1.625, 1.63125, 1.6375, 1.64375, 1.65, 1.65625, 1.6625, 1.66875, 1.675, 1.68125, 1.6875, 1.69375, 1.7, 1.70625, 1.7125, 1.71875, 1.725, 1.73125, 1.7375, 1.74375, 1.75, 1.75625, 1.7625, 1.76875, 1.775, 1.78125, 1.7875, 1.79375, 1.8, 1.80625, 1.8125, 1.81875, 1.825, 1.83125, 1.8375, 1.84375, 1.85, 1.85625, 1.8625, 1.86875, 1.875, 1.88125, 1.8875, 1.89375, 1.9, 1.90625, 1.9125, 1.91875, 1.925, 1.93125, 1.9375, 1.94375, 1.95, 1.95625, 1.9625, 1.96875, 1.975, 1.98125, 1.9875, 1.99375, 2, 2.004761905, 2.00952381, 2.014285714, 2.019047619, 2.023809524, 2.028571429, 2.033333333, 2.038095238, 2.042857143, 2.047619048, 2.052380952, 2.057142857, 2.061904762, 2.066666667, 2.071428571, 2.076190476, 2.080952381, 2.085714286, 2.09047619, 2.095238095, 2.1, 2.104761905, 2.10952381, 2.114285714, 2.119047619, 2.123809524, 2.128571429, 2.133333333, 2.138095238, 2.142857143, 2.147619048, 2.152380952, 2.157142857, 2.161904762, 2.166666667, 2.171428571, 2.176190476, 2.180952381, 2.185714286, 2.19047619, 2.195238095, 2.2, 2.204761905, 2.20952381, 2.214285714, 2.219047619, 2.223809524, 2.228571429, 2.233333333, 2.238095238, 2.242857143, 2.247619048, 2.252380952, 2.257142857, 2.261904762, 2.266666667, 2.271428571, 2.276190476, 2.280952381, 2.285714286, 2.29047619, 2.295238095, 2.3, 2.304761905, 2.30952381, 2.314285714, 2.319047619, 2.323809524, 2.328571429, 2.333333333, 2.338095238, 2.342857143, 2.347619048, 2.352380952, 2.357142857, 2.361904762, 2.366666667, 2.371428571, 2.376190476, 2.380952381, 2.385714286, 2.39047619, 2.395238095, 2.4, 2.404761905, 2.40952381, 2.414285714, 2.419047619, 2.423809524, 2.428571429, 2.433333333, 2.438095238, 2.442857143, 2.447619048, 2.452380952, 2.457142857, 2.461904762, 2.466666667, 2.471428571, 2.476190476, 2.480952381, 2.485714286, 2.49047619, 2.495238095, 2.5, 2.504761905, 2.50952381, 2.514285714, 2.519047619, 2.523809524, 2.528571429, 2.533333333, 2.538095238, 2.542857143, 2.547619048, 2.552380952, 2.557142857, 2.561904762, 2.566666667, 2.571428571, 2.576190476, 2.580952381, 2.585714286, 2.59047619, 2.595238095, 2.6, 2.604761905, 2.60952381, 2.614285714, 2.619047619, 2.623809524, 2.628571429, 2.633333333, 2.638095238, 2.642857143, 2.647619048, 2.652380952, 2.657142857, 2.661904762, 2.666666667, 2.671428571, 2.676190476, 2.680952381, 2.685714286, 2.69047619, 2.695238095, 2.7, 2.704761905, 2.70952381, 2.714285714, 2.719047619, 2.723809524, 2.728571429, 2.733333333, 2.738095238, 2.742857143, 2.747619048, 2.752380952, 2.757142857, 2.761904762, 2.766666667, 2.771428571, 2.776190476, 2.780952381, 2.785714286, 2.79047619, 2.795238095, 2.8, 2.804761905, 2.80952381, 2.814285714, 2.819047619, 2.823809524, 2.828571429, 2.833333333, 2.838095238, 2.842857143, 2.847619048, 2.852380952, 2.857142857, 2.861904762, 2.866666667, 2.871428571, 2.876190476, 2.880952381, 2.885714286, 2.89047619, 2.895238095, 2.9, 2.904761905, 2.90952381, 2.914285714, 2.919047619, 2.923809524, 2.928571429, 2.933333333, 2.938095238, 2.942857143, 2.947619048, 2.952380952, 2.957142857, 2.961904762, 2.966666667, 2.971428571, 2.976190476, 2.980952381, 2.985714286, 2.99047619, 2.995238095, 3, 3.009708738, 3.019417476, 3.029126214, 3.038834951, 3.048543689, 3.058252427, 3.067961165, 3.077669903, 3.087378641, 3.097087379, 3.106796117, 3.116504854, 3.126213592, 3.13592233, 3.145631068, 3.155339806, 3.165048544, 3.174757282, 3.184466019, 3.194174757, 3.203883495, 3.213592233, 3.223300971, 3.233009709, 3.242718447, 3.252427184, 3.262135922, 3.27184466, 3.281553398, 3.291262136, 3.300970874, 3.310679612, 3.32038835, 3.330097087, 3.339805825, 3.349514563, 3.359223301, 3.368932039, 3.378640777, 3.388349515, 3.398058252, 3.40776699, 3.417475728, 3.427184466, 3.436893204, 3.446601942, 3.45631068, 3.466019417, 3.475728155, 3.485436893, 3.495145631, 3.504854369, 3.514563107, 3.524271845, 3.533980583, 3.54368932, 3.553398058, 3.563106796, 3.572815534, 3.582524272, 3.59223301, 3.601941748, 3.611650485, 3.621359223, 3.631067961, 3.640776699, 3.650485437, 3.660194175, 3.669902913, 3.67961165, 3.689320388, 3.699029126, 3.708737864, 3.718446602, 3.72815534, 3.737864078, 3.747572816, 3.757281553, 3.766990291, 3.776699029, 3.786407767, 3.796116505, 3.805825243, 3.815533981, 3.825242718, 3.834951456, 3.844660194, 3.854368932, 3.86407767, 3.873786408, 3.883495146, 3.893203883, 3.902912621, 3.912621359, 3.922330097, 3.932038835, 3.941747573, 3.951456311, 3.961165049, 3.970873786, 3.980582524, 3.990291262, 4, 4.018181818, 4.036363636, 4.054545455, 4.072727273, 4.090909091, 4.109090909, 4.127272727, 4.145454545, 4.163636364, 4.181818182, 4.2, 4.218181818, 4.236363636, 4.254545455, 4.272727273, 4.290909091, 4.309090909, 4.327272727, 4.345454545, 4.363636364, 4.381818182, 4.4, 4.418181818, 4.436363636, 4.454545455, 4.472727273, 4.490909091, 4.509090909, 4.527272727, 4.545454545, 4.563636364, 4.581818182, 4.6, 4.618181818, 4.636363636, 4.654545455, 4.672727273, 4.690909091, 4.709090909, 4.727272727, 4.745454545, 4.763636364, 4.781818182, 4.8, 4.818181818, 4.836363636, 4.854545455, 4.872727273, 4.890909091, 4.909090909, 4.927272727, 4.945454545, 4.963636364, 4.981818182, 5, 5.035714286, 5.071428571, 5.107142857, 5.142857143, 5.178571429, 5.214285714, 5.25, 5.285714286, 5.321428571, 5.357142857, 5.392857143, 5.428571429, 5.464285714, 5.5, 5.535714286, 5.571428571, 5.607142857, 5.642857143, 5.678571429, 5.714285714, 5.75, 5.785714286, 5.821428571, 5.857142857, 5.892857143, 5.928571429, 5.964285714, 6, 6.045454545, 6.090909091, 6.136363636, 6.181818182, 6.227272727, 6.272727273, 6.318181818, 6.363636364, 6.409090909, 6.454545455, 6.5, 6.545454545, 6.590909091, 6.636363636, 6.681818182, 6.727272727, 6.772727273, 6.818181818, 6.863636364, 6.909090909, 6.954545455, 7, 7.052631579, 7.105263158, 7.157894737, 7.210526316, 7.263157895, 7.315789474, 7.368421053, 7.421052632, 7.473684211, 7.526315789, 7.578947368, 7.631578947, 7.684210526, 7.736842105, 7.789473684, 7.842105263, 7.894736842, 7.947368421, 8, 8.083333333, 8.166666667, 8.25, 8.333333333, 8.416666667, 8.5, 8.583333333, 8.666666667, 8.75, 8.833333333, 8.916666667, 9, 9.090909091, 9.181818182, 9.272727273, 9.363636364, 9.454545455, 9.545454545, 9.636363636, 9.727272727, 9.818181818, 9.909090909, 10, 10.125, 10.25, 10.375, 10.5, 10.625, 10.75, 10.875, 11, 11.16666667, 11.33333333, 11.5, 11.66666667, 11.83333333, 12, 12.16666667, 12.33333333, 12.5, 12.66666667, 12.83333333, 13, 13.2, 13.4, 13.6, 13.8, 14, 14.2, 14.4, 14.6, 14.8, 15, 15.25, 15.5, 15.75, 16, 16.2, 16.4, 16.6, 16.8, 17, 18 };
		 
		public Form1()
		{
			InitializeComponent();
		}

		private void timer1_Tick(object sender, EventArgs e)
		{

			int state = 0;
			int dataByte;
			double vOut;
			chart1.ChartAreas[0].AxisY.Maximum = 3.6;

			if (serialPort1.IsOpen)
			{

				while (dataQueue.TryDequeue(out dataByte))
				{

					if (state == 0)
					{
						if (dataByte == 255)
						{
							state = 1;
						}
					}
					else if (state == 1)
					{
						mostImport = dataByte;

						state = 2;
					}
					else if (state == 2)
					{
						leastImport = dataByte;
						combined = (mostImport << 5) | leastImport;
						averageQueue.Enqueue(combined);
						stabilityQueue.Enqueue(combined);
						textBox1.Text = combined.ToString();

						if (averageQueue.Count >= 200)
						{
							double ave = averageQueue.Average();
							int average = Convert.ToInt32(ave);
							vOut = average * 3.6 / 1023;
							if (average >= 710)
							{
								textBox5.Text = "saturated";
							}
							else if (average <= 30)
							{
								textBox5.Text = "Out of Range";
							}
							else
							{
								textBox5.Text = "";
								distance = array1[average-31];
								textBox4.Text = distance.ToString("N2") + " cm";
							}
							textBox2.Text = vOut.ToString("N3");
							textBox3.Text = average.ToString("N3");
							if (checkBox1.Checked == true)
								outputFile.Write(average.ToString() + ", " + DateTime.Now.ToLongTimeString() + "\r\n");
							chart1.Series["Series1"].Points.AddXY(count.ToString(), vOut.ToString());
							count++;


							averageQueue.TryDequeue(out nothing);
						}
						
						
						
					
						state = 0;

					}

				}
			}
		}

		private void button1_Click(object sender, EventArgs e)
		{
			if (serialPortOpen == 0)
			{
				serialPortOpen = 1;
				serialPort1.Open();
				serialPort1.Write("c");
				button1.Text = "Disconnect Serial";
			}
			else if (serialPortOpen == 1)
			{
				serialPortOpen = 0;
				serialPort1.Close();

				button1.Text = "Connect Serial";
			}
		}

		private void serialPort1_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)
		{
			int newbyte = 0;
			Int32 bytesToRead = serialPort1.BytesToRead;
			while (bytesToRead > 0)
			{
				dataQueue.Enqueue(serialPort1.ReadByte());
				bytesToRead = serialPort1.BytesToRead;
				serialDataString = serialDataString + newbyte.ToString() + ", ";
			}
		}

		private void button2_Click(object sender, EventArgs e)
		{
			tare = distance;
		}

		private void button3_Click(object sender, EventArgs e)
		{
			tare = 0;
		}
	}
}
	
